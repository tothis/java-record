<?xml version="1.0" encoding="UTF-8"?>
<!-- 通过status的值控制log4j2日志级别(trace debug info warn error fatal) -->
<!-- monitorInterval 每隔多少秒重新读取配置文件 最小可为5 可以不重启应用的情况下修改配置 -->
<Configuration status="info" monitorInterval="1800">
    <!-- http://logging.apache.org/log4j/2.x/manual/layouts.html -->
    <properties>
        <!-- 控制台显示的日志最低级别 -->
        <property name="console-print-level">DEBUG</property>
        <!-- 日志默认输出级别 -->
        <property name="output-log-level">INFO</property>

        <!-- 日志分割默认最小单位 -->
        <property name="every-file-size">20MB</property>

        <!-- 日志默认存放位置 -->
        <!-- ${web:rootDir}是web项目根路径 java项目无此变量 需要删掉 否则会报异常 -->
        <property name="basePath">/log4j2-log</property>

        <!-- %p 信息级别 -->
        <!-- %d 时间 后跟日期格式 %d{HH:mm:ss.SSS}表示输出到毫秒的时间 -->
        <!-- %L 输出行号 -->
        <!-- %l 输出语句所在的行数 包括类名 方法名 发生的线程 行数 -->
        <!-- %n 换行 -->
        <!-- %m 日志内容 -->
        <!-- %msg 日志文本 -->
        <!-- %t 输出当前线程名称 -->
        <!-- %F 输出所在的类文件名 如Log4j2Test.java -->
        <!-- %M 输出所在方法名 -->
        <!-- %logger 输出logger名称 因为Root Logger没有名称 所以没有输出 -->
        <!-- %-5level 输出日志级别 -5表示左对齐并且固定输出5个字符 如果不足在右边补0 -->
        <!-- %highlight 为每个日志级别设置颜色 {FATAL=white, ERROR=red, WARN=blue, INFO=black, DEBUG=green, TRACE=blue} -->
        <property name="console-log-pattern">
            %highlight{[%p] [%-d{yyyy-MM-dd HH:mm:ss}] [%l] %m%n}{FATAL=white,
            ERROR=red, WARN=yellow, INFO=cyan, DEBUG=magenta, TRACE=green}
        </property>

        <property name="rolling-max">50</property>
        <property name="rolling-fileName">${basePath}/rolling.log</property>
        <property name="rolling-filePattern">${basePath}/%d{yyyy-MM}/all-%d{yyyy-MM-dd}-%i.log.gz</property>
        <property name="rolling-output-log-pattern">%d{yyyy-MM-dd HH:mm:ss} [%-5level] %C.%M - %m%n</property>

        <property name="file-fileName">${basePath}/file.log</property>
        <property name="file-output-log-pattern">%d{yyyy-MM-dd HH:mm:ss} %C.%M - %m%n</property>
    </properties>

    <Appenders>
        <!-- 定义输出到控制台的配置 -->
        <Console name="console" target="SYSTEM_OUT">
            <!-- 设置输出格式 不设置默认为%m%n -->
            <PatternLayout pattern="${console-log-pattern}"/>
        </Console>

        <!-- 添加一个文本追加器 文件位于根目录下 名为log.log -->
        <File name="file" fileName="${file-fileName}">
            <PatternLayout pattern="${file-output-log-pattern}"/>
        </File>

        <!--
            filePattern 新建日志文件名称格式
 　　　　　　xxPolicies 指定滚动日志策略 即新建日志文件时机
         -->
        <RollingFile name="rolling-file" fileName="${rolling-fileName}"
                     filePattern="${rolling-filePattern}">
            <PatternLayout pattern="${rolling-output-log-pattern}"/>
            <SizeBasedTriggeringPolicy size="${every-file-size}"/>
            <!-- 同一目录下最多有几个日志文件时开始删除旧文件 创建新日志文件 -->
            <DefaultRolloverStrategy max="${rolling-max}"/>
        </RollingFile>
    </Appenders>

    <Loggers>
        <!--
            root节点指定项目根日志 如无单独指定logger 默认使用root日志输出
            additivity 是否执行后续logger或root 默认true
        -->
        <Logger name="com.example" level="info" additivity="false">
            <AppenderRef ref="console"/>
            <AppenderRef ref="file"/>
        </Logger>
        <!-- 设置对打印sql语句的支持 -->
        <Logger name="java.sql" level="debug" additivity="false">
            <AppenderRef ref="console"/>
        </Logger>

        <!--Root level="${output-log-level}">
            <AppenderRef ref="console"/>
            <AppenderRef ref="file"/>
            <AppenderRef ref="rolling-file"/>
        </Root-->
    </Loggers>
</Configuration>